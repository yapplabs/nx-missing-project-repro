#!/usr/bin/env node
/* eslint-disable no-undef */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// Get the directory name of the current module
const __dirname = path.dirname(fileURLToPath(import.meta.url));
const rootDir = path.resolve(__dirname, '..');
const outFile = path.resolve(rootDir, 'dist/named-img-config.json');
const inputFile = path.resolve(rootDir, 'dist/utils/named-img-config.js');

console.log('Generating JSON from:', inputFile);
console.log('Output file:', outFile);

// Create the directory if it doesn't exist
const outDir = path.dirname(outFile);
if (!fs.existsSync(outDir)) {
  fs.mkdirSync(outDir, { recursive: true });
}

try {
  // Read the file directly instead of importing it
  const js = fs.readFileSync(inputFile, 'utf8');

  // Extract the configuration object using regex
  const match = js.match(/const\s+NAMED_IMG_CONFIG\s*=\s*(\{[\s\S]*?\}\s*;)/);

  if (!match || !match[1]) {
    console.error('Error: Could not find configuration object in the JS file');
    process.exit(1);
  }

  // Parse the config object
  let configCode = match[1].replace(/;$/, ''); // Remove trailing semicolon
  configCode = configCode.replace(/profile: /g, '"profile": ');
  configCode = configCode.replace(/logo: /g, '"logo": ');
  configCode = configCode.replace(/width: /g, '"width": ');
  configCode = configCode.replace(/height: /g, '"height": ');
  configCode = configCode.replace(
    /buildUrl\(\) \{\s+return (`.+`);\s+}/g,
    '"buildUrl": $1',
  );
  configCode = configCode.replace(/\$\{this\./g, '${');
  configCode = configCode.replace(/`/g, '"');
  configCode = configCode.replace(/";/g, '"');
  configCode = configCode.replace(/\};/g, '}');
  configCode = JSON.stringify(JSON.parse(configCode), null, 2);

  // Write the JSON file
  fs.writeFileSync(outFile, configCode);
  if (fs.existsSync(path.resolve(rootDir, 'dist/named-img-config.js'))) {
    fs.rmSync(path.resolve(rootDir, 'dist/named-img-config.js')); // Remove js generated by babel
  }

  console.log('Successfully generated named-img-config.json');
} catch (error) {
  console.error('Error generating named-img-config.json:', error);
  process.exit(1);
}
